# The ojsc config uses Grouper Configuration Overlays (documented on wiki)
# By default the configuration is read from openJ2eeSessionCluster.base.properties
# (which should not be edited), and the openJ2eeSessionCluster.properties overlays
# the base settings.  See the openJ2eeSessionCluster.base.properties for the possible
# settings that can be applied to the openJ2eeSessionCluster.properties

########################################
## Config chaining hierarchy
########################################

# comma separated config files that override each other (files on the right override the left)
# each should start with file: or classpath:
# e.g. classpath:twoFactor.hibernate.base.properties, file:c:/temp/myFile.properties
ojsc.config.hierarchy = classpath:openJ2eeSessionCluster.base.properties, classpath:openJ2eeSessionCluster.properties

# seconds between checking to see if the config files are updated
ojsc.config.secondsBetweenUpdateChecks = 60

########################################
## Security
########################################

# cipher to use for symmetic encryption
ojsc.encryptionCipher = AES/CBC/PKCS5Padding

# secret to use for symmetic encryption, should be length at least 16, and if has slashes,
# it is assumed to be a file name where it should be read from file contents
ojsc.encryptionKey = 

# implement the encryption interface: org.openJ2eeSessionCluster.interfaces.OjscEncryption
ojsc.ojscEncryptionImplementation = org.openJ2eeSessionCluster.logic.OjscDefaultEncryption

# if the secure flag should be set on cookies.  Note, this is an option since there could be SSL off-loading
ojsc.secureCookieFlag = true

#########################################
## Serialization
#########################################

# implement the serialization interface: org.openJ2eeSessionCluster.interfaces.OjscSerialization
# ojsc.ojscSerializationImplementation = org.openJ2eeSessionCluster.logic.OjscJsonSerialization
ojsc.ojscSerializationImplementation = org.openJ2eeSessionCluster.logic.OjscJavaSerialization


#########################################
## Logic
#########################################

# if we should cluster sessions
ojsc.enable = true

# implement the session interface: org.openJ2eeSessionCluster.interfaces.OjscSession
ojsc.ojscSessionImplementation = org.openJ2eeSessionCluster.logic.OjscCookieSession


# implement the session storage interface: org.openJ2eeSessionCluster.interfaces.OjscSessionStorage
ojsc.ojscSessionStorageImplementation = org.openJ2eeSessionCluster.logic.OjscS3SessionStorage

# if the session is older than so many minutes, then dont recover
ojsc.requireSessionPersistedInMinutes = 60

# 1 meg is the largest a session can be
ojsc.maxSessionSizeToPersist = 1000000

# if this many consecutive sessions serialized are too large, then stop storing session altogether for this session
ojsc.maxSessionsTooLarge = 5

#########################################
## S3 settings
#########################################

# bucket name if using S3
ojsc.s3.bucketName = 

# user and pass file for S3
# e.g.
# accessKey=XXXXX
# secretKey=XXXX/XXXXXXX
ojsc.s3.accountFileName = 